#!/usr/bin/env python3
"""
solve_shapes.py
Solve Poisson/Laplace on the shapes generated by make_shapes.py with simple BCs:
- Dirichlet u=0 on outer, u=Vinc on inclusion_boundary.

Examples:
  python -m src.cli.solve_shapes --mode disk2d --R 0.2 --Vinc 0.2 --h 0.03 --outfile results/phi_disk2d

"""
from __future__ import annotations
import argparse
from mpi4py import MPI
from petsc4py import PETSc
from dolfinx.io import XDMFFile
from src.geometry.make_shapes import build_2d, build_3d
from src.geometry.helpers import gmsh_model_to_mesh
from src.physics.permittivity import eps_from_materials
from src.solver.poisson import solve_poisson
from dolfinx import fem

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--mode", required=True, choices=["disk2d","rod2d","ellipse2d","sphere3d","cylinder3d","wedge3d"])
    ap.add_argument("--Lx", type=float, default=1.0)
    ap.add_argument("--Ly", type=float, default=1.0)
    ap.add_argument("--L", type=float, default=1.0)
    ap.add_argument("--R", type=float, default=0.25)
    ap.add_argument("--h", type=float, default=0.05)
    ap.add_argument("--Vinc", type=float, default=0.2)
    ap.add_argument("--outfile", type=str, default="results/phi_shape")
    args = ap.parse_args()

    if args.mode.endswith("2d"):
        model = build_2d(args.mode, args.Lx, args.Ly, args.h, R=args.R)
        gdim = 2
    else:
        model = build_3d(args.mode, args.Lx, args.Ly, args.L, args.h, R=args.R)
        gdim = 3

    domain, cell_tags, facet_tags, t2n_cell, t2n_facet = gmsh_model_to_mesh(MPI.COMM_WORLD, gdim=gdim)
    import gmsh; gmsh.finalize()

    eps_fun = eps_from_materials(domain, cell_tags, t2n_cell, None, space="DG", degree=0)

    dirich = {"outer": 0.0, "inclusion_boundary": args.Vinc}
    # --- Ensure function space and zero RHS are defined ---
    try:
        V  # use existing if already set
    except NameError:
        V = fem.FunctionSpace(domain, ("Lagrange", 1))
    try:
        f_expr  # use existing if already set
    except NameError:
        f_expr = fem.Constant(domain, PETSc.ScalarType(0.0))

    # --- Robust call supporting both solver signatures ---
    try:
        # --- Ensure function space and zero RHS are defined ---
        try:
            V  # use existing if already set
        except NameError:
            V = fem.FunctionSpace(domain, ("Lagrange", 1))
        try:
            f_expr  # use existing if already set
        except NameError:
            f_expr = fem.Constant(domain, PETSc.ScalarType(0.0))
        # --- Robust call supporting both solver signatures ---
        try:
            # --- Ensure function space and zero RHS are defined ---
            if "V" not in locals():
                V = fem.FunctionSpace(domain, ("Lagrange", 1))
            if "f_expr" not in locals():
                f_expr = fem.Constant(domain, PETSc.ScalarType(0.0))

            # --- Robust call supporting both solver signatures ---
            try:
                uh, V, (dx, ds), diag = solve_poisson(
                    V=V,
                    f=f_expr,
                    eps_fun=eps_fun,
                    dirichlet=dirich,
                    neumann=None,
                    ksp_options={"ksp_type":"cg","pc_type":"hypre","ksp_rtol":1e-10,"ksp_max_it":500}
                )
            except TypeError:
                # Alternate signature: (domain, cell_tags, facet_tags, ...)
                uh, V, (dx, ds), diag = solve_poisson(
                    domain=domain,
                    cell_tags=cell_tags,
                    facet_tags=facet_tags,
                    f=f_expr,
                    eps_fun=eps_fun,
                    dirichlet=dirich,
                    neumann=None,
                    ksp_options={"ksp_type":"cg","pc_type":"hypre","ksp_rtol":1e-10,"ksp_max_it":500}
                )

        except TypeError as _e:
            # Alternate signature: (domain, cell_tags, facet_tags, ...)
            uh, V, (dx, ds), diag = solve_poisson(
                domain=domain,
                cell_tags=cell_tags,
                facet_tags=facet_tags,
                f=f_expr,
                eps_fun=eps_fun,
                dirichlet=dirich,
                neumann=None,
                ksp_options={"ksp_type":"cg","pc_type":"hypre","ksp_rtol":1e-10,"ksp_max_it":500}
            )
    except TypeError as _e:
        # Alternate signature: (domain, cell_tags, facet_tags, ...)
        uh, V, (dx, ds), diag = solve_poisson(
            domain=domain,
            cell_tags=cell_tags,
            facet_tags=facet_tags,
            f=f_expr,
            eps_fun=eps_fun,
            dirichlet=dirich,
            neumann=None,
            ksp_options={"ksp_type":"cg","pc_type":"hypre","ksp_rtol":1e-10,"ksp_max_it":500}
        )


    if domain.comm.rank == 0:
        print("[shapes] facet counts:", diag.facet_counts)
        print(f"[shapes] phi range: {diag.u_min:.4e} .. {diag.u_max:.4e}")

    with XDMFFile(domain.comm, f"{args.outfile}.xdmf", "w") as xdmf:
        xdmf.write_mesh(domain); xdmf.write_meshtags(cell_tags); xdmf.write_meshtags(facet_tags)
        xdmf.write_function(uh); xdmf.write_function(eps_fun)

if __name__ == "__main__":
    main()